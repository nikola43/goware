package decrypt_key

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"os"

	"github.com/nikola43/goware/utils"
)

var Key rsa.PrivateKey

func init() {
	Key = rsa.PrivateKey{
		PublicKey: rsa.PublicKey{
			N: utils.FromBase10("24139770838889844946845945084403869482502186819705456499810731089184906964973802901699113872205056987777099417179862613700146023251945759883815255028985167991723308259632833213950330191746729154928377960535926731982055686551692429255240751735772760553943403656708501319394920106477076034733381703170015339100199942970911957027926836642330070977519366058381634749970165999343658596529706256367566350981817827420173134992257493011505948354538827762072441826949201511179642323073583358464732136054727680499299399789855647796126462258757956828693293053670689944902856693694900022742606782875181147911528125009196579021717"), // yes, yes change all of those
			E: 65537,
		},
		D: utils.FromBase10("17441911722140940655934754986981040200267422257251819302615889486338601088124334174651847646223142095948990474109556957848894740971502930676996258165426166286404226864494767096147061744812592362685559021091257435334944884954793347307985036192441636487951569241132759555324589953797228763488255852269858802697667687452424815472000177816845979763587170789220768931866315376605303206415725335371897204058015898155474913926246407499490494856496969607105064750428740468891104464198291781602944552213680194517360708346255651174301144890546521337926432218170881268995784096198683334269147325659513492616611918004000613069377"),
		Primes: []*big.Int{
			utils.FromBase10("150918884078778193255207084219726798541951428714115109307194126689727511265193736070031009385589910556472910110365880193507564186049659032753053444315243645807809952740069126107031391690044141309251118415499199369178304034529291586851756126006290699977902860895587943555274465764346216175002440332433921734673"),
			utils.FromBase10("159951956882275373677064196198005451416068737893787596490000554330239740706250291837500558956264494959800589505370361613341687414107357711203437364771343794252445778773033407681076726489829593123605421515666257499020167754950111213085500598767285107992199787383538850923080669237468180620125556485767616239429"),
		},
	}
	Key.Precompute()
}

func main() {
	key, err := hex.DecodeString(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	aes_key, err := rsa.DecryptOAEP(sha256.New(), rand.Reader, &Key, key, nil)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Key: %x\n", aes_key)
}
